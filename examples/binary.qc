1
DEFINE_FUNCTION modulo 2 2 [2	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	LOAD_NAME argv	LOAD_INT 1	GET_INDEX 1	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	LOAD_NAME argv	LOAD_INT 1	GET_INDEX 1	BINARY_DIV	BINARY_MUL	BINARY_SUB	RETURN	3	]
5
DEFINE_FUNCTION lpadwith 3 3 [6	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	STORE_NAME pad	7	LOAD_NAME pad	LOAD_INT 0	GET_INDEX 1	STORE_NAME pad	9	LOAD_NAME argv	LOAD_INT 1	GET_INDEX 1	STORE_NAME first	10	LOAD_NAME argv	LOAD_INT 2	GET_INDEX 1	STORE_NAME secnd	13	LOAD_NAME len	LOAD_NAME secnd	CALL_FUNCTION 1	LOAD_NAME len	LOAD_NAME first	CALL_FUNCTION 1	CMP_GT	JUMP_IF_FALSE 19	14	LOAD_INT 0	STORE_NAME i	15	LOAD_NAME i	LOAD_NAME len	LOAD_NAME secnd	CALL_FUNCTION 1	LOAD_NAME len	LOAD_NAME first	CALL_FUNCTION 1	BINARY_SUB	LOAD_INT 1	BINARY_ADD	CMP_LT	JUMP_IF_FALSE 18	16	LOAD_NAME pad	LOAD_NAME first	BINARY_ADD	STORE_NAME first	17	17	LOAD_NAME i	LOAD_INT 1	BINARY_ADD	STORE_NAME i	JUMP_BACK 15	18	JUMP_TO 25	19	LOAD_NAME len	LOAD_NAME first	CALL_FUNCTION 1	LOAD_NAME len	LOAD_NAME secnd	CALL_FUNCTION 1	CMP_GT	JUMP_IF_FALSE 25	20	LOAD_INT 0	STORE_NAME i	21	LOAD_NAME i	LOAD_NAME len	LOAD_NAME first	CALL_FUNCTION 1	LOAD_NAME len	LOAD_NAME secnd	CALL_FUNCTION 1	BINARY_SUB	LOAD_INT 1	BINARY_ADD	CMP_LT	JUMP_IF_FALSE 24	22	LOAD_NAME pad	LOAD_NAME secnd	BINARY_ADD	STORE_NAME secnd	23	23	LOAD_NAME i	LOAD_INT 1	BINARY_ADD	STORE_NAME i	JUMP_BACK 21	24	25	27	LOAD_NAME first	LOAD_NAME secnd	MAKE_LIST 2	RETURN	28	]
30
DEFINE_FUNCTION joinany 2 2 [31	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	STORE_NAME joinstr	32	LOAD_NAME argv	LOAD_INT 1	GET_INDEX 1	STORE_NAME strlst	33	LOAD_STRING ''	STORE_NAME outstr	35	LOAD_INT 0	STORE_NAME i	36	LOAD_NAME i	LOAD_NAME len	LOAD_NAME strlst	CALL_FUNCTION 1	CMP_LT	JUMP_IF_FALSE 39	37	37	LOAD_NAME outstr	LOAD_NAME string	LOAD_NAME strlst	LOAD_NAME i	GET_INDEX 1	CALL_FUNCTION 1	LOAD_NAME joinstr	BINARY_ADD	BINARY_ADD	STORE_NAME outstr	38	38	LOAD_NAME i	LOAD_INT 1	BINARY_ADD	STORE_NAME i	JUMP_BACK 36	39	41	LOAD_NAME outstr	RETURN	42	]
44
DEFINE_FUNCTION flip 1 1 [45	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	STORE_NAME str	46	LOAD_STRING ''	STORE_NAME out	48	LOAD_NAME len	LOAD_NAME str	CALL_FUNCTION 1	STORE_NAME i	49	LOAD_NAME i	LOAD_INT 0	CMP_GE	JUMP_IF_FALSE 52	50	50	LOAD_NAME out	LOAD_NAME str	LOAD_NAME i	UNARY_ADD	GET_INDEX 1	BINARY_ADD	STORE_NAME out	51	51	LOAD_NAME i	LOAD_INT 1	BINARY_SUB	STORE_NAME i	JUMP_BACK 49	52	54	LOAD_NAME out	RETURN	55	]
57
DEFINE_FUNCTION binary 1 1 [58	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	STORE_NAME n	59	MAKE_LIST 0	STORE_NAME b	60	LOAD_INT 0	STORE_NAME i	61	LOAD_NAME n	LOAD_INT 0	CMP_GT	JUMP_IF_FALSE 65	62	62	LOAD_NAME b	LOAD_NAME modulo	LOAD_NAME n	LOAD_INT 2	CALL_FUNCTION 2	MAKE_LIST 1	BINARY_ADD	STORE_NAME b	63	63	LOAD_NAME n	LOAD_INT 2	BINARY_DIV	STORE_NAME n	64	64	LOAD_NAME i	LOAD_INT 1	BINARY_ADD	STORE_NAME i	JUMP_BACK 61	65	66	LOAD_NAME flip	LOAD_NAME joinany	LOAD_STRING ''	LOAD_NAME b	CALL_FUNCTION 2	CALL_FUNCTION 1	RETURN	67	]
69
DEFINE_FUNCTION bintoint 1 1 [71	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	STORE_NAME num	72	LOAD_NAME num	STORE_NAME binary_val	73	LOAD_INT 0	STORE_NAME decimal_val	74	LOAD_INT 1	STORE_NAME base	75	LOAD_INT 0	STORE_NAME rem	77	LOAD_NAME num	LOAD_INT 0	CMP_GT	JUMP_IF_FALSE 82	78	LOAD_NAME modulo	LOAD_NAME num	LOAD_INT 10	CALL_FUNCTION 2	STORE_NAME rem	79	79	LOAD_NAME decimal_val	LOAD_NAME rem	LOAD_NAME base	BINARY_MUL	BINARY_ADD	STORE_NAME decimal_val	80	80	LOAD_NAME num	LOAD_INT 10	BINARY_DIV	STORE_NAME num	81	81	LOAD_NAME base	LOAD_INT 2	BINARY_MUL	STORE_NAME base	JUMP_BACK 77	82	84	LOAD_NAME decimal_val	RETURN	85	]
87
DEFINE_FUNCTION xor 2 2 [88	LOAD_NAME string	LOAD_NAME argv	LOAD_INT 0	GET_INDEX 1	CALL_FUNCTION 1	STORE_NAME first	89	LOAD_NAME string	LOAD_NAME argv	LOAD_INT 1	GET_INDEX 1	CALL_FUNCTION 1	STORE_NAME secnd	91	LOAD_NAME lpadwith	LOAD_STRING '0'	LOAD_NAME first	LOAD_NAME secnd	CALL_FUNCTION 3	STORE_NAME both	92	LOAD_NAME both	LOAD_INT 0	GET_INDEX 1	STORE_NAME first	93	LOAD_NAME both	LOAD_INT 1	GET_INDEX 1	STORE_NAME secnd	95	LOAD_NAME println	LOAD_NAME both	CALL_FUNCTION 1	96	LOAD_NAME println	LOAD_NAME len	LOAD_NAME first	CALL_FUNCTION 1	LOAD_NAME len	LOAD_NAME secnd	CALL_FUNCTION 1	CALL_FUNCTION 2	99	LOAD_STRING ''	STORE_NAME new	100	LOAD_INT 0	STORE_NAME i	101	LOAD_NAME i	LOAD_NAME len	LOAD_NAME first	CALL_FUNCTION 1	CMP_LT	JUMP_IF_FALSE 108	102	LOAD_NAME first	LOAD_NAME i	GET_INDEX 1	LOAD_NAME secnd	LOAD_NAME i	GET_INDEX 1	CMP_EQ	JUMP_IF_FALSE 104	103	103	LOAD_NAME new	LOAD_STRING '0'	BINARY_ADD	STORE_NAME new	JUMP_TO 106	104	105	105	LOAD_NAME new	LOAD_STRING '1'	BINARY_ADD	STORE_NAME new	106	107	107	LOAD_NAME i	LOAD_INT 1	BINARY_ADD	STORE_NAME i	JUMP_BACK 101	108	110	LOAD_NAME long	LOAD_NAME new	CALL_FUNCTION 1	RETURN	111	]
113
LOAD_NAME print
LOAD_STRING 'Enter first number  : '
CALL_FUNCTION 1
114
LOAD_NAME long
LOAD_NAME input
CALL_FUNCTION 0
CALL_FUNCTION 1
STORE_NAME one
116
LOAD_NAME print
LOAD_STRING 'Enter second number : '
CALL_FUNCTION 1
117
LOAD_NAME long
LOAD_NAME input
CALL_FUNCTION 0
CALL_FUNCTION 1
STORE_NAME two
119
LOAD_NAME println
LOAD_STRING 'BINARY:'
CALL_FUNCTION 1
120
LOAD_NAME println
LOAD_NAME binary
LOAD_NAME one
CALL_FUNCTION 1
LOAD_STRING '^'
LOAD_NAME binary
LOAD_NAME two
CALL_FUNCTION 1
LOAD_STRING '\n'
CALL_FUNCTION 4
122
LOAD_NAME xor
LOAD_NAME binary
LOAD_NAME one
CALL_FUNCTION 1
LOAD_NAME binary
LOAD_NAME two
CALL_FUNCTION 1
CALL_FUNCTION 2
STORE_NAME num
123
LOAD_NAME println
LOAD_NAME one
LOAD_STRING '^'
LOAD_NAME two
LOAD_STRING '='
LOAD_NAME bintoint
LOAD_NAME num
CALL_FUNCTION 1
CALL_FUNCTION 5
