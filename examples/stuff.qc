LOAD_NULL
LOAD_STRING ''
LOAD_STRING '<'
LOAD_STRING '>[\n'
LOAD_STRING '  '
LOAD_STRING ',\n'
LOAD_STRING ']('
LOAD_STRING ')'
LOAD_INT 2
LOAD_INT 3
LOAD_STRING '[y/n]'
LOAD_STRING 'y'
LOAD_STRING 'heyo'
1
DEFINE_FUNCTION pf 1 1 [2	LOAD_NAME argv	LOAD_INT_CONST 0	GET_INDEX 1	STORE_NAME obj	3	LOAD_CONST 3	LOAD_NAME type	LOAD_NAME obj	CALL 1	LOAD_CONST 2	BINARY_ADD	BINARY_ADD	STORE_NAME s	4	LOAD_INT_CONST 0	STORE_NAME i	5	LOAD_NAME len	LOAD_NAME obj	CALL 1	LOAD_NAME i	CMP_LT	JUMP_IF_FALSE 8	6	LOAD_CONST 5	LOAD_NAME disp	LOAD_NAME obj	LOAD_NAME i	GET_INDEX 1	CALL 1	LOAD_CONST 4	BINARY_ADD	BINARY_ADD	INPLACE_ADD s	7	LOAD_NAME i	INCREMENT i	JUMP_BACK 5	8	9	LOAD_CONST 7	LOAD_NAME string	LOAD_NAME len	LOAD_NAME obj	CALL 1	CALL 1	LOAD_CONST 6	LOAD_NAME s	BINARY_ADD	BINARY_ADD	BINARY_ADD	RETURN	]
13
LOAD_NAME pf
LOAD_INT_CONST 1
LOAD_CONST 8
LOAD_CONST 9
MAKE_LIST 3
CALL 1
STORE_NAME p
15
LOAD_CONST 11
LOAD_NAME input
LOAD_CONST 10
CALL 1
REF_TOP
GET_ATTR lower
CALL_METHOD 0
CMP_EQ
TERNARY_IF [LOAD_NAME println	LOAD_NAME p	CALL 1	] []
16
LOAD_NAME println
LOAD_CONST 12
GET_ATTR lower
CALL 0
REF_TOP
GET_ATTR upper
CALL_METHOD 0
REF_TOP
GET_ATTR lower
CALL_METHOD 0
CALL 1
