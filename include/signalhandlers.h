// Signal Handlers

/*

List retrieved from http://www.yolinux.com/TUTORIALS/C++Signals.html

SIGHUP	1	Hangup (POSIX)
Report that user's terminal is disconnected. Signal used to report the termination of the controlling process.
SIGINT	2	Interrupt (ANSI)
Program interrupt. (ctrl-c)
SIGQUIT	3	Quit (POSIX)
Terminate process and generate core dump.
SIGILL	4	Illegal Instruction (ANSI)
Generally indicates that the executable file is corrupted or use of data where a pointer to a function was expected.
SIGTRAP	5	Trace trap (POSIX)
SIGABRT
SIGIOT	6	Abort (ANSI)
IOT trap (4.2 BSD)
Process detects error and reports by calling abort
SIGBUS	7	BUS error (4.2 BSD)
Indicates an access to an invalid address.
SIGFPE	8	Floating-Point arithmetic Exception (ANSI).
This includes division by zero and overflow.The IEEE Standard for Binary Floating-Point Arithmetic (ANSI/IEEE Std 754-1985) defines various floating-point exceptions.
SIGKILL	9	Kill, unblockable (POSIX)
Cause immediate program termination.
Can not be handled, blocked or ignored.
SIGUSR1	10	User-defined signal 1
SIGSEGV	11	Segmentation Violation (ANSI)
Occurs when a program tries to read or write outside the memory that is allocated for it by the operating system, dereferencing a bad or NULL pointer. Indicates an invalid access to valid memory.
SIGUSR2	12	User-defined signal 2
SIGPIPE	13	Broken pipe (POSIX)
Error condition like trying to write to a socket which is not connected.
SIGALRM	14	Alarm clock (POSIX)
Indicates expiration of a timer. Used by the alarm() function.
SIGTERM	15	Termination (ANSI)
This signal can be blocked, handled, and ignored. Generated by "kill" command.
SIGSTKFLT	16	Stack fault
SIGCHLD
SIGCLD	17	Child status has changed (POSIX)
Signal sent to parent process whenever one of its child processes terminates or stops.
See the YoLinux.com Fork, exec, wait, waitpid tutorial
SIGCONT	18	Continue (POSIX)
Signal sent to process to make it continue.
SIGSTOP	19	Stop, unblockable (POSIX)
Stop a process. This signal cannot be handled, ignored, or blocked.
SIGTSTP	20	Keyboard stop (POSIX)
Interactive stop signal. This signal can be handled and ignored. (ctrl-z)
SIGTTIN	21	Background read from tty (POSIX)
SIGTTOU	22	Background write to tty (POSIX)
SIGURG	23	Urgent condition on socket (4.2 BSD)
Signal sent when "urgent" or out-of-band data arrives on a socket.
SIGXCPU	24	CPU limit exceeded (4.2 BSD)
SIGXFSZ	25	File size limit exceeded (4.2 BSD)
SIGVTALRM	26	Virtual Time Alarm (4.2 BSD)
Indicates expiration of a timer.
SIGPROF	27	Profiling alarm clock (4.2 BSD)
Indicates expiration of a timer. Use for code profiling facilities.
SIGWINCH	28	Window size change (4.3 BSD, Sun)
SIGIO
SIGPOLL	29	I/O now possible (4.2 BSD)
Pollable event occurred (System V)
Signal sent when file descriptor is ready to perform I/O (generated by sockets)
SIGPWR	30	Power failure restart (System V)
SIGSYS	31	Bad system call

*/

// 1
void sighupHandler()
{
    error("Received Hangup Signal", line_num);
}

// 2
void sigintHandler()
{
    error("Keyboard Interrupt", line_num);
}

// 3
void sigquitHandler()
{
    error("Received Quit Signal", line_num);
}

// 4
void sigillHandler()
{
    error("Received Illigal Instruction Signal", line_num);
}

// 5
void sigtrapHandler()
{
    error("Received Trace Trap Signal", line_num);
}

// 6
void sigabrtHandler()
{
    error("Aborted", line_num);
}

// 7
void sigbusHandler()
{
    error("Bus Error (invalid address accessed)", line_num);
}

// 8
void sigfpeHandler()
{
    error("Floating Point Arithmetic Exception", line_num);
}

// 11
void sigsegvHandler()
{
    error("Segmentation Fault (I/O operation outside of memory bounds)", line_num);
}

// 13
void sigpipeHandler()
{
    error("Broken Pipe", line_num);
}

// 15
void sigtermHandler()
{
    error("Terminated", line_num);
}

// 16
void sigstkfltHandler()
{
    error("Stack Fault", line_num);
}

// 17
void sigtstpHandler()
{
    cleanupAll();
    exit(1);
}

// 24
void sigxcpuHandler()
{
    error("CPU Limit Exceeded", line_num);
}

// 25
void sigxfszHandler()
{
    error("File Size Limit Exceeded", line_num);
}

// 30
void sigpwrHandler()
{
    error("Power Failure Restart", line_num);
}

// 31
void sigsysHandler()
{
    error("Bad System Call", line_num);
}
